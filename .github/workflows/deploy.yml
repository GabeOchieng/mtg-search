name: Deploy

on: push

jobs:
  test:
    name: Run tests, build package, build image, deploy
    runs-on: ubuntu-latest
    steps:
      - uses: hashicorp/setup-terraform@v1
      - uses: actions/checkout@v2
      - uses: haya14busa/action-cond@v1
        id: env
        with:
          cond: endsWith(${{ github.ref }}, "/prod")
          if_true: "prod"
          if_false: "sbx"
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install pipenv
        run: pip3 install pipenv
      - name: Install dependencies (including dev)
        run: |
          export PIP_FIND_LINKS=https://download.pytorch.org/whl/torch_stable.html  # need for torch cpu whl
          pipenv sync --dev
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Download model artifacts
        run: pipenv run dvc pull mtg_search/artifacts/models/$(pipenv run mtg-search checkpoint)/*.dvc
      - name: Run tests
        run: pipenv run pytest
      - name: Get version
        id: version
        run: echo "::set-output name=version::$(pipenv run mtg-search version)"
      - name: Build package
        uses: RalfG/python-wheels-manylinux-build@v0.3.3
        with:
          python-versions: "cp38-cp38"
      - name: ECR Login
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: 347651660649.dkr.ecr.us-east-1.amazonaws.com/mtg-search:${{ steps.version.outputs.version }}-${{ steps.env.outputs.value }}
      - name: Terraform init
        working-directory: infra
        run: terraform init
      - name: Terraform plan
        working-directory: infra
        run: |
          terraform workspace select ${{ steps.env.outputs.value }}
          terraform plan
      - name: Terraform apply
        id: tf_apply
        working-directory: infra
        run: |
          terraform workspace select ${{ steps.env.outputs.value }}
          terraform apply -auto-approve
          echo "::set-output name=endpoint::$(terraform output -raw endpoint)"
      - name: Test endpoint
        run: |
          curl ${{ steps.tf_apply.outputs.endpoint }}
          curl ${{ steps.tf_apply.outputs.endpoint }}/search?q=hello
